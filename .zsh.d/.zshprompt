#!/bin/zsh

autoload -Uz vcs_info

zstyle ':vcs_info:*' stagedstr '%F{28}●'
zstyle ':vcs_info:*' unstagedstr '%F{11}●'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{11}%r'
zstyle ':vcs_info:*' enable git svn

function zrcautoload()
{
    emulate -L zsh
    setopt extended_glob
    local fdir ffile
    local -i ffound

    ffile=$1
    (( found = 0 ))
    for fdir in ${fpath} ; do
        [[ -e ${fdir}/${ffile} ]] && (( ffound = 1 ))
    done

    (( ffound == 0 )) && return 1
    if [[ $ZSH_VERSION == 3.1.<6-> || $ZSH_VERSION == <4->* ]] ; then
        autoload -U ${ffile} || return 1
    else
        autoload ${ffile} || return 1
    fi
    return 0
}

function precmd
{
    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))

    ###
    # Truncate the path if it's too long.

    PR_FILLBAR=""
    PR_PWDLEN=""

    GIT="${vcs_info_msg_0_}"
    CLEAN=$GIT
    CLEAN=`echo $CLEAN | sed -r 's/%F\{[^\}]*\}//g'`
    CLEAN="${CLEAN}+"
    local promptsize=$((${#${(%):---(%n@%m)---()--}} + ${#${CLEAN}} - 1 ))
    local pwdsize=${#${(%):-%~}}

    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
	((PR_PWDLEN=$TERMWIDTH - $promptsize))
    else
	PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
    fi

    if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
        zstyle ':vcs_info:*' formats '[%F{green}%b%c%u%F{yellow}]'
    else
        zstyle ':vcs_info:*' formats '[%F{green}%b%c%u%F{red}●%F{yellow}]'
    fi

    zrcautoload vcs_info || vcs_info() { return 1 }
}

setprompt ()
{
    if [ x$plateforme = xLinux ] ; then

	setopt prompt_subst

    ###
    # See if we can use colors.

	autoload colors zsh/terminfo
	if [[ "$terminfo[colors]" -ge 8 ]]; then
	    colors
	fi
	for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE GREY; do
	    eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
	    eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
	    (( count = $count + 1 ))
	done
	PR_NO_COLOUR="%{$terminfo[sgr0]%}"


    ###
    # See if we can use extended characters to look nicer.

	typeset -A altchar
	set -A altchar ${(s..)terminfo[acsc]}
	PR_SET_CHARSET="%{$terminfo[enacs]%}"
	PR_SHIFT_IN="%{$terminfo[smacs]%}"
	PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
	PR_HBAR=${altchar[q]:--}
	PR_ULCORNER=${altchar[l]:--}
	PR_LLCORNER=${altchar[m]:--}
	PR_LRCORNER=${altchar[j]:--}
	PR_URCORNER=${altchar[k]:--}


###
# Finally, the prompt.

#     PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
# $PR_GREY$PR_SHIFT_IN$PR_ULCORNER$PR_HBAR$PR_SHIFT_OUT(\
# $PR_RED%(!.%SROOT%s.%n)$PR_RED@%m:%l\
# $PR_GREY)$PR_SHIFT_IN$PR_HBAR$PR_GREY$PR_HBAR${(e)PR_FILLBAR}$PR_GREY$PR_HBAR$PR_SHIFT_OUT(\
# $PR_MAGENTA%$PR_PWDLEN<...<%~%<<\
# $PR_GREY)$PR_SHIFT_IN$PR_HBAR$PR_GREY$PR_URCORNER$PR_SHIFT_OUT\

# $PR_GREY$PR_SHIFT_IN$PR_LLCORNER$PR_GREY$PR_HBAR$PR_SHIFT_OUT(\
# %(?..$PR_LIGHT_RED%?$PR_BLUE:)\
# ${(e)PR_APM}$PR_YELLOW%D{%H:%M}\
# $PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_GREY)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_GREY$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_NO_COLOUR '

#     RPROMPT=' $PR_GREY$PR_SHIFT_IN$PR_HBAR$PR_GREY$PR_HBAR$PR_SHIFT_OUT\
# ($PR_YELLOW%D{%a,%b%d}$PR_GREY)$PR_SHIFT_IN$PR_HBAR$PR_GREY$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'

#     PS2='$PR_GREY$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_GREY$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
# $PR_LIGHT_GREEN%_$PR_GREY)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
# $PR_GREY$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '

########
	PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
$PR_YELLOW$PR_SHIFT_IN$PR_ULCORNER$PR_HBAR${PR_SHIFT_OUT}[\
$PR_BLUE%(!.${PR_RED}ROOT%s.%n)$PR_CYAN@$PR_BLUE%m\
${PR_YELLOW}]${GIT}$PR_SHIFT_IN$PR_HBAR$PR_YELLOW$PR_HBAR${(e)PR_FILLBAR}$PR_YELLOW$PR_HBAR${PR_SHIFT_OUT}[\
$PR_GREEN%$PR_PWDLEN<...<%~%<<\
${PR_YELLOW}]$PR_SHIFT_IN$PR_HBAR$PR_YELLOW$PR_URCORNER$PR_SHIFT_OUT\

$PR_YELLOW$PR_SHIFT_IN$PR_LLCORNER$PR_YELLOW$PR_HBAR${PR_SHIFT_OUT}\
%(?..[$PR_LIGHT_RED%?${PR_YELLOW}])\
%(!.$PR_RED.$PR_WHITE)\
${PR_GREY}\$\
$PR_NO_COLOUR '

	RPROMPT=' $PR_YELLOW$PR_SHIFT_IN${PR_SHIFT_OUT}\
[$PR_YELLOW%D{%H:%M}${PR_YELLOW}]$PR_SHIFT_IN$PR_HBAR$PR_YELLOW$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'

	PS2='$PR_GREY$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_GREY$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_LIGHT_GREEN%_$PR_GREY)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_GREY$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '
########

    else

    ###
    # Need this so the prompt will work.
	setopt prompt_subst

    ###
    # See if we can use colors.

	autoload colors zsh/terminfo
#    if [[ "$terminfo[colors]" -ge 8 ]]; then
	colors
#    fi
	for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
	    eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
	    eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
#	eval PR_$color='%{$fg[${(L)color}]%}'
	    (( count = $count + 1 ))
	done
	PR_NO_COLOUR="%{$terminfo[sgr0]%}"


    ###
    # See if we can use extended characters to look nicer.
	typeset -A altchar
	set -A altchar ${(s..)terminfo[acsc]}
	PR_SET_CHARSET="%{$terminfo[enacs]%}"
	PR_SHIFT_IN="%{$terminfo[smacs]%}"
	PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
	PR_HBAR=${altchar[q]:--}
	PR_ULCORNER=${altchar[l]:--}
	PR_LLCORNER=${altchar[m]:--}
	PR_LRCORNER=${altchar[j]:--}
	PR_URCORNER=${altchar[k]:--}

	PROMPT='$PR_MAGENTA%(!.%SROOT%s.$PR_BLUE%n$PR_CYAN)@$PR_BLUE%m$PR_CYAN\
 [%(?.$PR_WHITE$?.$PR_RED% err $?)$PR_CYAN]\
 [$PR_MAGENTA%~$PR_CYAN]$PR_WHITE\

$PR_BLUE%(!.#.$)$PR_WHITE '

    RPROMPT="[$PR_CYAN%D $PR_BLUE%T$PR_WHITE]"

    PS2=''

    fi

}

setprompt
